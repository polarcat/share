#!/bin/bash

theme=$HOME/.gtkrc-2.0-lite
if [ -f $theme ]; then
	export GTK2_RC_FILES=$theme
fi

_name=$(basename $0)
_home=/tmp/$USER/$_name
_temp=$_home/temp
_list=$_home/list
_show=$_home/show
_rnum=$_home/rnum
_dump=''
_geom=''
_rnum=0
_hrow=26

_wctl()
{
	xdotool windowactivate $1
	xdotool windowfocus $1
	# wmctrl -i -a $1
}

mkdir -p $_home

getpid() { pid=$3; }
getpid $(wmctrl -l -x -p | grep -iE "yad.winlist")
if [ -n "$pid" ]; then
	kill $pid
	exit 0
fi

# prepare sorted list with defined icons
echo -n > $_temp
wmctrl -l -x | grep -vE "[[:blank:]]\-1" | sed "s/['\`Â´]//g" |
while read wid tmp class usr cmd; do
	icon=$(echo $class | cut -f2 -d'.' | tr '[:upper:]' '[:lower:]')
	case $icon in
		thunar) icon=folder ;;
		xterm|urxvt) icon=utilities-terminal ;;
		luakit|epiphany) icon=applications-internet ;;
		firefox) icon=/opt/firefox/browser/chrome/icons/default/default16.png ;;
		google-chrome-stable) icon=/opt/google/chrome/product_logo_16.png ;;
		*) ;;
	esac
	echo "$class $icon $wid $cmd" >> $_temp
done
sort $_temp > $_list
_rnum=$(wc -l $_list | cut -f1 -d' ')
if [ $_rnum -lt 3 ]; then
	_rnum=3
else
	_rnum=$((_rnum + 1))
fi

if [ -z "$XWINLIST_GEOMETRY" ]; then
	_geom="--center --width 500 --height $(($_rnum * $_hrow))"
elif [ "$XWINLIST_GEOMETRY" = "auto" ]; then
	x=$(xdotool getmouselocation | cut -f2 -d':' | cut -f1 -d' ')
	h=$(($_rnum * $_hrow))
	y=$(xdotool getmouselocation | cut -f3 -d':' | cut -f1 -d' ')
	y=$((y - h - 10))
	_geom="--geometry 500x$h+$x+$y"
	echo $_rnum: $_geom
else
	_geom="--geometry $XWINLIST_GEOMETRY"
fi

# keep out --undecorated option
# prepare script
echo -n "yad \
--title 'Open windows' \
--class 'winlist' \
--borders 4 \
--skip-taskbar \
--search-column 3 \
--no-markup \
--no-buttons \
$_geom \
--list \
--print-column 4 \
--hide-column 4 \
--expand-column 3 \
--no-headers \
--column 1 \
--column 2:IMG \
--column 3 \
--column 4" > $_show

_status="yes"
if echo $@ | grep -qE "\--no-status"; then
	_status=''
fi

thislist="/dev/null"

setthislist()
{
	thislist="/tmp/.dwmout$2"
}

ifs=$IFS; IFS=':'; setthislist $DISPLAY; IFS=$ifs

xsetroot -name "list"

# prepare list for dialog
cat $_list | while read class icon wid cmd; do
	if [ "$class" = "stalonetray.stalonetray" ]; then
		continue
	fi

	if [ "$class" = "XXkb.XXkb" ]; then
		continue
	fi

	if [ "$class" = "yad.winlist" ]; then
		continue
	fi

	if [ -n "$_status" ]; then
		if pidof dwm-stable >/dev/null; then
			if [ -z "$thislist" -o ! -f "$thislist" ]; then
				min=""
			else
				if grep -qi $(($wid)) $thislist; then
					min="(*)"
				else
					min=""
				fi
			fi
		else
			if xwininfo -id $wid | grep -qE "IsUnMapped"; then
				min=".."
			else
				min="::"
			fi
		fi
	fi
	cmd=$(echo $cmd | sed 's/["]//g;s/^[-]//' | iconv -f utf8 -t utf8)
        echo -n " \"$min\" \"$icon\" \"$cmd\" \"$wid\"" >> $_show
done

_postcmd()
{
	local postdir=$HOME/.xwinlist.d

	echo "$@"
	mkdir -p $postdir
	if [ -n "$4" -a -d $postdir/$4 ]; then
		for cmd in $postdir/$4/*; do
			$cmd
		done
	fi
}

_setwid() { wid=$1; }

# show dialog
chmod +x $_show
ret=$($_show 2>/dev/null)

# process result
if [ -n "$ret" ]; then
	if [ "(nil)|" = "$ret" ]; then
		exit 0
	fi
	ifs=$IFS; IFS='|'; _setwid $ret; IFS=$ifs
	_wctl $wid
	_postcmd $(wmctrl -l | grep $wid)
fi
